# used to create the object
name: HumanoidPingpongTiltNoEarlyStopG1

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env: 
  numEnvs: ${resolve_default:1024,${...num_envs}}
  envSpacing: 4
  episodeLength: 170
  enableDebugVis: true
  test: ${...test}
  is_g1: true

  alphaVelocityReward: ${resolve_default:1000,${...alpha_velocity_reward}}

  powerCoefficient: ${resolve_default:0.002,${...power_coefficient}}

  penalty: ${resolve_default:-600,${...penalty}}

  hitTableReward: ${resolve_default:2000,${...hit_reward}}

  nothitTablePenalty: ${resolve_default:-1000,${...hit_penalty}}

  crossNetRewardFloat: ${resolve_default:1000,${...cross_net_reward}}
  
  # numObservations: 945
  # numActions: 14

  clipActions: 1.0

  powerScale: 1.0

  # reward parameters
  headingWeight: 0.5
  upWeight: 0.1

  # cost parameters
  actionsCost: 0.01
  energyCost: 0.05
  dofVelocityScale: 0.1
  angularVelocityScale: 0.25
  contactForceScale: 0.01
  jointsAtLimitCost: 0.25
  deathCost: -1.0
  terminationHeight: 0.8
  futureDt: 20

  keyBodyNames: ['no']
  # bodyStatesId: [0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,27,31,32,33,34,35,36,37]
  bodyStatesId: [0,31,32,33,34,35,36,37,38,39]
  # ['pelvis','right_shoulder_pitch_link', 'right_shoulder_roll_link', 
  # 'right_shoulder_yaw_link', 'right_elbow_link', 'right_wrist_roll_link', 
  # 'right_wrist_pitch_link', 'right_wrist_yaw_link', 'right_rubber_hand', 'pingpong_paddle']
#  footBodyNames: ["left_ankle_roll_link", "right_ankle_roll_link", "left_wrist_yaw_link", "right_wrist_yaw_link"]

  motion_file: "../../assets/interos/InterosMotion/motion_G1/"

  asset:
#    assetFileName: "g1_description/g1_29dof_rev_1_0.urdf"
#    assetFileName: "mjcf/g1.urdf"
    # assetFileName: "mjcf/g1_29dof_rev_1_0.urdf"
    assetFileName: "mjcf/g1_29dof_rev_1_0_fixed_except_right_arm.urdf"
    dofBodyIds: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    dofOffsets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

  plane:
#    terrain:
    terrain: "../../assets/interos/InterosMotion/scenes/height_map.npy"
      #    terrain: "/home/jiangnan/IsaacGym_Preview_4_Package/IsaacGymEnvs-main/assets/interos/InterosMotion/scenes/created_04.npy"
    staticFriction: 1.0
    dynamicFriction: 1.0
    restitution: 0.0
    transform_x: -15
    transform_y: -17.25
    horizontal_scale: 0.015

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.0083 # 0.0166 # 1/60 s
#  dt: 0.005
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
#  gravity: [0.0, 0.0, 0.0]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 0
    contact_offset: 0.0002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 10.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 1457088 # 74285440 #84897646 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

task:
  randomize: False
  randomization_params:
    # specify which attributes to randomize for each actor type and property
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      humanoid:
        color: True
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
